# CASA00025 Group Project Title Here

## Project Summary 

Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.

### Problem Statement 

What is the problem youâ€™re trying to address using this application? 

### End User 

Who are you building this application for? How does it address a need this community has?

### Data

What data are you using? 

### Methodology

How are you using this data to address the problem?

### Interface

How does your application's interface work to address the needs of your end user?

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>

:::
## How it Works 
The core machine learning functionality is encapsulated within a modular object called GrapeML. The module systematically processes environmental data and predicts vineyard suitability as follows:

First, the computeEnvironmentalFactors function extracts key variables for a given region and year, including Growing Season Temperature (GST), Growing Degree Days (GDD), Growing Season Precipitation (GSP), slope, aspect, elevation, and latitude, using TerraClimate and SRTM datasets.

A basic environmental suitability mask is generated through computeSuitabilityMask, applying threshold filters to GST, GDD, GSP, slope, and elevation:
```{r}
var suitabilityMask = GrapeML.computeSuitabilityMask(factors);
```
The runMachineLearning function conducts model training and prediction. Positive samples are generated by random sampling within existing vineyard polygons. Negative samples are generated by sampling within unsuitable areas defined by the inverted suitability mask.

Features are extracted from a composite feature image:
```{r}
var featureImage = ee.Image.cat([...]).clip(region);
```
Samples are split into training (70%) and testing (30%) sets:
```{r}
sampledPoints = sampledPoints.randomColumn();
var training = sampledPoints.filter(ee.Filter.lt('random', 0.7));
var testing = sampledPoints.filter(ee.Filter.gte('random', 0.7));
```
A Random Forest classifier with 50 trees is trained:
```{r}
var classifier = ee.Classifier.smileRandomForest({
  numberOfTrees: 50,
  variablesPerSplit: 2,
  seed: 42
}).train({
  features: training,
  classProperty: 'class',
  inputProperties: features
});
```
Model performance is evaluated through an error matrix and accuracy score. Feature importance is also extracted to interpret variable contributions.

Predictions are made by classifying the feature image and producing a suitability probability surface:
```{r}
var suitabilityScore = featureImage.classify(probabilityClassifier)
    .select('classification')
    .reproject({crs: 'EPSG:4326', scale: 250});
```
Areas with a probability greater than 0.7 are identified as high suitability zones. The final outputs include the suitability score map, high-suitability area calculation, model accuracy, and feature importance.

In case of data insufficiency (e.g., not enough vineyards or sample points), the system falls back to using the basic environmental suitability mask alone.
